1. rails new recipe_blog -d postgresql
2. rake db:create
3. rails g controller Site index
3. create root route to site#index
4. changed site:index.html title
5. created: user routes, session routes, recipe routes in routes.rb (look at chart)
6. rails g controller User new create show
7. rails g model User first_name last_name email password_digest
8. rails g model Recipe name instructions
          (adding has many in user.rb)
9. User.rb: has_many :recipes, dependent: :destroy
          (adding belongs_to in recipe.rb)
10. Recipe.rb: belongs_To :user
          (adding belongs_to in create_recipes.rb)
11. DB:MIGRATE:create_recipes.rb t.belongs_to :user
12. delete "null" on timestamps in create..
13. rake db:migrate (localhost wont work until here)
14. check database
    rails c
    User.all
    Recipe.all
15. in user model add: has_secure_password
16. in gemfile un comment "gem 'bcrypt', '~> 3.1.7'"
17. install using bundle
18. create a new User in rails c
    u = User.create(email: "alex415@gmail.com", password: "password") enter "u" to view creation
19. create a new Recipe in rails c
    r = Recipe.create(name: "cheeseburger", instructions: "just eat it")
20. users controller def new:
    @user = User.new
    render :new
21. create form for sign up
    <%= form_for @user do |f| %>
      <%= f.text_field :first_name, placeholder: "First Name" %> <br>
      <%= f.text_field :last_name, placeholder: "Last Name" %> <br>
      <%= f.email_field :email, placeholder: "Email" %> <br>
      <%= f.password_field :password, placeholder: "Password" %> <br>
      <%= f.submit "Sign Up" %>
    <% end %>
22. users controller private def user_params:
    private
      def user_params
        params.require(:user).permit(:first_name, :last_name, :email, :password)
23. users controller def create
    def create
      user = User.new(user_params)
        if user.save
          session[:user_id] = user.id
          # redirect_to '/profile'
          redirect_to profile_path
        else
          # redirect_to '/signup'
          redirect_to signup_path
        end
    end
24. users controller def show:
    # show current_user
    def show
      @current_user = User.find(session[:user_id])
      render :show
    end
25. edit profile page on show.html (current user recipes wont show until sessions controller is created)
    <h1>Profile Page</h1>

    <div>
      <p><%= @current_user.first_name %></p>
      <p><%= @current_user.last_name %></p>
      <p><%= @current_user.email %></p>
    </div>

    <h3>My Recipes</h3>
    <% @current_user.recipes %>
26. create sessions controller
    rails g controller sessions new create destroy
    (delete extra routes)
27. create log in form in sessions: new.html (add url: sessions_path)
    <h1>Log In</h1>

    <%= form_for :user, url: sessions_path do |f| %>
      <%= f.email_field :email, placeholder: "Email" %> <br>
      <%= f.password_field :password, placeholder: "Password" %> <br>
      <%= f.submit "Log In" %>
    <% end %>
28. sessions controller def new create destroy
    # login form
    def new
      render :new
    end

    # authenticate the user, set session, redirect
    def create
      user = User.find_by_email(user_params[:email])
      if user && user.authenticate(user_params[:password])
        session[:user_id] = user.id
        redirect_to profile_path
      else
        redirect_to login_path
      end
    end

    # clear session (log out user)
    def destroy
      session[:user_id] = nil
      redirect_to root_path
    end

    private
      def user_params
        params.require(:user).permit(:email, :password)
      end
                              session logic working: sign up / log in / logout
29. make session method available through application controller
    protect_from_forgery with: :exception

    def current_user
      @current_user ||= User.find(session[:user_id]) if session[:user_id]
    end

    helper_method :current_user

    def authorize
      unless current_user
        redirect_to login_path
      end
    end

30. now that the session method is available globally we can refactor 
    in users_controller def show, we can delete:
    @current_user = User.find(session[:user_id])
31. we can also refactor users: show.html by deleting the "@" because helper method is defined.
    <h1>Profile Page</h1>

    <div>
      <p><%= current_user.first_name %></p>
      <p><%= current_user.last_name %></p>
      <p><%= current_user.email %></p>
    </div>

    <h3>My Recipes</h3>
    <% current_user.recipes %>
32. refactor UsersController to redirect to profile if user goes to signup and is already logged in:
    def new
      if current_user
          redirect_to profile_path
      else
        @user = User.new
        render :new
      end
    end
33. you can also refactor UsersController def create to redirect if user goes to signup also:
    # create a new user in db
    def create
      if current_user
        redirect_to profile_path
      else
        user = User.new(user_params)
      if user.save
        session[:user_id] = user.id
        # redirect_to '/profile'
        redirect_to profile_path
      else
        # redirect_to '/signup'
        redirect_to signup_path
        end
      end
    end
34. add functionality to redirect users away from profile if not logged in. in UsersController add at top:
    before_filter :authorize, only: [:show]
35. refactor sessions controller to redirect login form:
    # login form
    def new
      if current_user
        redirect_to profile_path
      else
        render :new
      end
    end
                                end of refactors. start recipes
36. rails g controller Recipes index new create show edit update destroy
37. recipes_controller add:
    # show ALL recipes in db
    def index
      @recipes = Recipe.all
      render :index
    end
38. create view for recipes: index.html
    <h1>Recipes Index</h1>
    <hr>
    <% @recipes.each do |recipe| %>
      <p><%= recipe.name %> - <%= recipe.instructions %></p>
    <% end %>

    <% if current_user %>
      <%= link_to "Add Recipe", new_recipe_path %>
    <% end %>
39. def new, in recipes_controller
    # form to create new recipe that BELONGS TO current_user
    def new
      @recipe = Recipe.new
      render :new
    end
40. create view for recipes: new.html
    <h1>New Recipe</h1>

    <%= form_for @recipe do |f| %>
      <%= f.text_field :name, placeholder: "Name" %> <br>
      <%= f.text_field :instructions, placeholder: "Instructions" %> <br>
      <%= f.submit "Save Recipe" %>
    <% end %>

41. set up recicpe params in the form.
    private
      def recipe_params
        params.require(:recipe).permit(:name, :instructions)
      end

42. def create, in recipes_controller (creating a recipe and making it linked to user immediately)
    # creates new recipe in db that BELONGS TO current_user
    def create
      recipe = current_user.recipes.create(recipe_params)
      redirect_to recipe_path(recipe)
    end
43. def show in recipes_controller
    def show
      @recipe = Recipe.find(params[:id])
      render :show
    end
44. show.html
    <h1><%= @recipe.name %></h1>
    <hr>
    <p><%= @recipe.instructions %></p>
45. refactor show.html in users so recipes iterate through in profile
    <h1>Profile Page</h1>

    <div>
      <p><%= current_user.first_name %></p>
      <p><%= current_user.last_name %></p>
      <p><%= current_user.email %></p>
    </div>

    <h3>My Recipes</h3>
    <% current_user.recipes.each do |recipe| %>
      <p><%= recipe.name %> - <%= recipe.instructions %></p>
    <% end %>
46. refactor the above to show "view recipe" links
    <h1>Recipes Index</h1>
    <hr>
    <% @recipes.each do |recipe| %>
      <p><%= recipe.name %> - <%= recipe.instructions %> <%= link_to "View Recipe", recipe_path(recipe) %></p>
    <% end %>

    <% if current_user %>
      <hr>
      <%= link_to "Add Recipe", new_recipe_path %>
    <% end %>
47. in recipes_controller prevent crud operations from unauthorized use
    before_filter :authorize, except: [:index, :show]
48. def edit in recipes_controller
    def edit
      @recipe = Recipe.find(params[:id])
      render :edit
    end

49. edit show.html in recipes to have edit links 
    <h1><%= @recipe.name %></h1>
    <hr>
    <p><%= @recipe.instructions %></p>

    <% if current_user && current_user.recipes.include?(@recipe) %>
      <p><%= link_to "Edit Recipe", edit_recipe_path(@recipe) %></p>
    <% end %>
50. create form for edit.html in recipes
    <h1>Edit Recipe</h1>

    <%= form_for @recipe do |f| %>
      <%= f.text_field :name, placeholder: "Name" %> <br>
      <%= f.text_field :instructions, placeholder: "Instructions" %> <br>
      <%= f.submit "Save Recipe" %>
    <% end %>
51. refactor def edit in recipes controller to make sure current user is logged in
    def edit
      @recipe = Recipe.find(params[:id])
      if current_user.recipes.include? @recipe
      render :edit
      else
        redirect_to profile_path
      end
    end
52. def update in recipes controller
    def update
      recipe = Recipe.find(params[:id])
      if current_user.recipes.include? recipe
        recipe.update_attributes(recipe_params)
        redirect_to recipe_path(recipe)
      else
        redirect_to profile_path
      end
    end
53. def destroy in recipes controller
    def destroy
      recipe = Recipe.find(params[:id])
      if current_user.recipes.include? recipe
        recipe.destroy_attributes(recipe_params)
        redirect_to recipe_path(recipe)
      else
        redirect_to profile_path
      end
    end








